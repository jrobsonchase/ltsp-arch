#!/bin/sh

. /usr/share/ltsp/ltsp-common-functions
test -f "/etc/ltsp/init-ltsp.conf" && . /etc/ltsp/init-ltsp.conf

VENDOR=${VENDOR:-$(detect_vendor)}
if [ -d "/usr/share/ltsp/init-ltsp.d/$VENDOR" ]; then
    scriptsdir="/usr/share/ltsp/init-ltsp.d/$VENDOR"
elif [ -d "/usr/share/ltsp/init-ltsp.d/common" ]; then
    scriptsdir="/usr/share/ltsp/init-ltsp.d/common"
else
    exit 1
fi

# workaround Debian bug in initramfs-tools:
# http://bugs.debian.org/660297
mountpoint -q /sys || mount -t sysfs -o nodev,noexec,nosuid sysfs /sys
mountpoint -q /proc || mount -t proc -o nodev,noexec,nosuid proc /proc

# Provide a break=<script-name> kernel parameter which will offer a shell just
# before sourcing that script.
for x in $(cat /proc/cmdline); do
    case "$x" in
        break=[0-9][0-9]-*)
            breakscript="$scriptsdir/${x#break=}"
            break;
            ;;
    esac
done

for script in $(run_parts_list "$scriptsdir") ; do
    if [ "$script" = "$breakscript" ]; then
        echo "Spawning shell before $script" >&2
        bash -l
        echo "Continuing ltsp-init execution" >&2
    fi
    . "$script"
done

# init=/sbin/init-ltsp can be used to launch this script, which should then
# chain to /sbin/init.
# To run it from the initramfs instead, set the EXEC_INIT environment variable
# to "false".
if [ "$EXEC_INIT" != "false" ]; then
    exec /sbin/init
fi
