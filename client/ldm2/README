ldm2 is the C translation of the python based LTSP Display Manager

Currently, it doesn't interface with a greeter, as this design will require a 
conversation with the greeter, rather than a simple "get name and password"
of the existing greeter.

Work on the greeter will also be done.

For now, We're using a simple GTK greeter that Ollie designed.  We'll make
it more pretty.

If you'd like to play with ldm2, here's the steps.

1) Get the branch (you've obviously done this already)
2) Build ldm2 (standard ./configure --prefix=usr  && make)
3) Copy ldm2 to $CHROOT/usr/bin
4) Copy share/ldm-script to $CHROOT/usr/share/ldm
5) Copy scripts/* to $CHROOT/usr/share/ldm/rc.d
6) Modify $CHROOT/usr/lib/ltsp/screen.d/ldm.  Change the call to ldm to ldm2.
   The command line parameters of ldm2 are the same.
7) Install ldmgtkgreet in the chroot

Currently, most things work.  Sound and Localdev seems to setup ok.
The command socket for ldm now lives in  /var/run/ldm_socket, snd the udev
scripts have been patched up in my ltspfs-upstream branch.

LDM_DIRECTX works!

We've got a new scripting mechanism for startup and shutdown scripts.
Right after the ssh connections been completed, /usr/share/ldm/ldm-script start
is called, which exectutes everything called S* in the rc.d dir in the ldm
share.

Two environment variables are passed down:

LDM_SERVER points to the server LDM is talking to, and
LDM_SOCKET points to the command socket the ssh connection has set up.

A three line script now replaces all the functionality of the delayed-mounter
daemon.

to exectute something on the server, you can simply do:

ssh -M $LDM_SOCKET $LDM_SERVER "your server command here"

After the X session's ended, ldm-script stop is called which looks for K* 
scripts.

Note that the scripts are .'d so, exits in your rc scripts will be bad mojo.

Have Fun!

Scott
