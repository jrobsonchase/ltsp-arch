#!/sbin/runscript
# Copyright 1999-2008 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Header: $

depend() {
    before modules
}

checkconfig() {
    if [ ! -f  /etc/ltsp_chroot ] ; then
        eerror "You are not in an LTSP chroot"
        eend 1
    fi
}

start() {
        checkconfig || return 1
        ebegin "Setting up LTSP client"

        if [ -z "$root_write_method" ]; then
            touch / 2> /dev/null || root_write_method="bind_mounts"
        fi
        [ "$root_write_method" = "bind_mounts" ] && bind_mounts


        # This logic stolen from fedora's scripts, since neither of us get 
        # lts.conf in the initramfs

	# Grab lts.conf from the same IP address as the mount server.
	# (TODO: This is duplicated from ltsp_config because we don't 
        # want to run that entire script at this point.)

	# check for NBD devices
	NBD_DEVICES=$(awk '/^\/dev\/nbd.* \/ /||/^\/dev\/nbd.* \/rofs /{print $1}' /proc/mounts)
	if [ -n "$NBD_DEVICES" ]; then
		for DEVICE in $NBD_DEVICES ; do
			SERVER=$(pgrep -f -l $DEVICE | awk '{print $3}')
			test -n "$SERVER" && break
		done
	else
		# check for NFS root
		SERVER=$(sed -ne '/ltsp.*nfs/ { s/^\([^:]*\):.*$/\1/; p; q }' /proc/mounts)
	fi

	SERVER="${SERVER:-192.168.0.254}"
	export SERVER

	ARCH=$(uname -m | sed -e 's:i[3-6]86:x86:' -e 's:x86_64:amd64:' -e 's:parisc:hppa:')
	TFTPPATH="/ltsp/${ARCH}/lts.conf"

	# Attempt to get lts.conf via tftp
	cd /var/run
	(echo "get ${TFTPPATH}"|tftp ${SERVER} >/dev/null 2>&1)

	if [ -s ./lts.conf ];then
		cp ./lts.conf /etc/lts.conf
	fi
	cd - > /dev/null

	# back to our regularly scheduled programming
        . /usr/share/ltsp/ltsp-init-common

        load_modules || true
        set_time || true
        configure_console || true
        configure_resolver || true
        configure_swap || true
        configure_syslog || true
        configure_fstab || true
        run_rcfiles || true
#        configure_x || true
        configure_serial_mouse || true
        configure_localdev || true
        configure_printer || true
        [ "$root_write_method" = "bind_mounts" ] && bind_unmounts
}

load_modules() {
    # TODO: support module arguments
    MODULES=$(env|grep ^MODULE_|sed -e s/^MODULE_[0-9]*\=//|sed -e s/\ /*/)
    echo "modules_$(uname -r | sed -e s/-/_/g -e s/\./_/g)=\"${MODULES}\"" >> /etc/conf.d/modules
    #for module in $(env|grep ^MODULE_|sed -e s/^MODULE_[0-9]*\=//|sed -e s/\ /*/);do
    #    modprobe $(echo $module|tr "*" " ")
    #done
}

configure_localdev() {
    boolean_is_true "$LOCALDEV" && mkdir -p /var/run/drives
}

configure_console() {
    if [ -n "$CONSOLE_KEYMAP" ]; then
        sed -i 's/keymap="us"/keymap="${CONSOLE_KEYMAP}"/' /etc/conf.d/keymaps
    fi
}

configure_resolver() {
    # TODO: probably a better way to do this
    client_ip=$(ip -o -f inet addr show | sed -e 's,.* \(.*\)/.*,\1,' | grep -v '^127')
    hostname=$(hostname)
    if [ "(none)" = "$hostname" ] ; then
        hostname="client-${client_ip}"
    fi
 
    echo "hostname="$hostname"" > /etc/conf.d/hostname

    cat <<EOF >> /etc/hosts
$client_ip $hostname
$SERVER server
EOF

    if [ -n "$DNS_SERVER" ] && [ -n "$SEARCH_DOMAIN" ]; then
        cat <<EOF >> /etc/conf.d/net
dns_servers=( "${DNS_SERVER}" )
dns_search="${SEARCH_DOMAIN}"
EOF
    fi
}

configure_syslog() {
    if [ -z "$SYSLOG" ] || [ "$SYSLOG" = "remote" ]; then
        SYSLOG_HOST=${SYSLOG_HOST:-"${SERVER}"}
        cat <<EOF > /etc/syslog-ng/syslog-ng.conf
source src { unix-stream("/dev/log"); internal(); };
destination remote {tcp("$SYSLOG_HOST");};
log {source(src);destination(remote);};

EOF
    fi
}

configure_fstab() {
    if [ -z "$CONFIGURE_FSTAB" ] || boolean_is_true "$CONFIGURE_FSTAB" ; then
        echo "/dev/root     /       rootfs defaults        0       0" > /etc/fstab
        echo "tmpfs         /tmp    tmpfs   defaults,nosuid,nodev 0 0" >> /etc/fstab
        mount /tmp
    fi
}

bind_mounts () {
    # set defaults
    test -z "$tmpfs_dir" && tmpfs_dir=/var/lib/ltsp-client-setup
    mount -t tmpfs -o mode=0755 tmpfs $tmpfs_dir
    # preserve directory structure
    for d in $rw_dirs ; do
        if [ -d "$d" ]; then
            cd $tmpfs_dir
            tar --no-recursion -cpf - $(find $d -type d 2> /dev/null) 2> /dev/null | tar xpf -
            mount --bind $tmpfs_dir/$d $d
        else
            echo "WARNING: $d does not exist"
        fi
    done
    # copy contents into tmpfs
    for d in $copy_dirs $temp_copy_dirs; do
        if [ -d "$d" ]; then
            cd $tmpfs_dir
            tar -cpf - $d 2> /dev/null | tar xpf -
            mount --bind $tmpfs_dir/$d $d
        else
            echo "WARNING: $d does not exist"
        fi
    done
    # mount one file on top of another
    for f in $bindfiles ; do
        if [ -e "$f" ]; then
            mkdir -p "$(dirname $tmpfs_dir/$f)"
            cp $f $tmpfs_dir/$f
            mount --bind $tmpfs_dir/$f $f
        else
            echo "WARNING: $f does not exist"
        fi
    done
}

bind_unmounts() {
    for dir in $temp_copy_dirs; do
        umount $dir
        rm -rf $tmpfs_dir/${dir#/}
    done
}

run_rcfiles() {
    for rcfile in $(env | sort | awk -F= '$1 ~ /^RCFILE_/ { print $2 }'); do
        [ -x "$rcfile" ] && "$rcfile" $@
    done
}
