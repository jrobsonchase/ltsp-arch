#!/bin/sh
#
#  Copyright (c) 2005 Canonical LTD
#
#  Author: Matt Zimmerman <mdz@canonical.com>
#
#  2006, Oliver Grawert <ogra@canonical.com>
#        Vagrant Cascadian <vagrant@freegeek.org>
#  2007, Scott Balneaves <sbalneav@ltsp.org>
#        Oliver Grawert <ogra@canonical.com>
#  2008, Vagrant Cascadian <vagrant@freegeek.org>
#        Warren Togami <wtogami@redhat.com>
#        Oliver Grawert <ogra@canonical.com>
#  2009, Warren Togami <wtogami@redhat.com>
#  2012, Alkis Georgopoulos <alkisg@gmail.com>
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License as
#  published by the Free Software Foundation; either version 2 of the
#  License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, you can find it on the World Wide
#  Web at http://www.gnu.org/copyleft/gpl.html, or write to the Free
#  Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#

usage() {
cat <<EOF
$0 [OPTION] [ARCH...]
  -b, --basedir     Base of ltsp chroot.  Default is /opt/ltsp if unspecified.
  -t, --tftpdirs    List of tftpd dirs to update in. Defaults to
                    "/var/lib/tftpboot /tftpboot /srv/tftp".
  -c, --copytftp    Copy files.  Defaults to "true".
  -d, --tftpbootdir Subdir within tftpdir where ltsp kernels are.  Defaults
                    to "ltsp".
  -h, --help        This message.
EOF
}

cleanup() {
    # Stop trapping
    trap - 0 HUP INT QUIT KILL SEGV PIPE TERM
    umount_marked
    rmdir "$mnt"
}

# distro specific functions

# For all kernels in TFTP, find the kernel $version from vmlinuz-* filename.
# If the corresponding /opt/ltsp/$arch/lib/modules/$version is missing,
# then delete kernel and images for this version from tftpboot directory.
# Distros that don't match vmlinuz-* should override this function.
cleanup_kernels() {
    # Loop through every vmlinuz-* file
    for kernelpath in $(find "$tftpboot/$arch/" -name 'vmlinuz-*'); do
        kernel=${kernelpath##*/}
        version=${kernel#vmlinuz-}
        if [ ! -d "$chroot/lib/modules/$version" ]; then
            echo "Removing $kernelpath"
            # Common
            rm -f "$tftpboot/$arch/vmlinuz-$version"
            rm -f "$tftpboot/$arch/config-$version"
            rm -f "$tftpboot/$arch/System.map-$version"
            # Fedora
            rm -f "$tftpboot/$arch/initrd-$version.img"
            rm -f "$tftpboot/$arch/initramfs-$version.img"
            rm -f "$tftpboot/$arch/elf-$version.img"
            rm -f "$tftpboot/$arch/wraplinux-nbi-$version.img"
            rm -f "$tftpboot/$arch/aout-$version.img"
            rm -f "$tftpboot/$arch/symvers-$version.gz"
            # Debian
            rm -f "$tftpboot/$arch/initrd.img-$version"
            rm -f "$tftpboot/$arch/nbi.img-$version"
            # Ubuntu
            rm -f "$tftpboot/$arch/abi-$version"
            rm -f "$tftpboot/$arch/vmcoreinfo-$version"
        fi
    done
}

#
# Handle args
#

ARGS=$(getopt -o b:t:c:d:h --long base:,tftpdirs:,copytftp:,tftpbootdir:,help \
       -n $0 -- "$@")

[ $? != 0 ] && exit 1

eval set -- "${ARGS}"

while true ; do
    case "$1" in
        -b|--base)        BASE=$2 ; shift 2 ;;
        -t|--tftpdirs)    TFTPDIRS=$2 ; shift 2 ;;
        -c|--copytftp)    COPYTFTP=$2 ; shift 2 ;;
        -d|--tftpbootdir) TFTPBOOTDIR=$2 ; shift 2 ;;
        -h|--help)        usage ; exit 0 ;;
        --) shift ; break ;;
        *) echo "Internal error!" ; exit 1 ;;
    esac
done

# This also sources vendor functions and .conf file settings
. /usr/share/ltsp/ltsp-server-functions
require_root

BASE=${BASE:-"/opt/ltsp"}
TFTPDIRS=${TFTPDIRS:-"/var/lib/tftpboot /tftpboot /srv/tftp"}
COPYTFTP=${COPYTFTP:-"true"}
TFTPBOOTDIR=${TFTPBOOTDIR-"ltsp"}
# If someone configures his tftpd to serve files directly from his chroot,
# he should also set TFTPDIRS=/opt/ltsp, COPYTFTP=false and TFTPBOOTDIR="" in
# ltsp-update-kernels.conf.

# Chroots can be specified in the command line. If not, update all of them.
if [ $# -eq 0 ]; then
    set -- $(
        {
            find "$BASE/" -mindepth 1 -maxdepth 1 -type d ! -name images \
                -printf "%f\n"
            if [ -d "$BASE/images/" ]; then
                find "$BASE/images/" -mindepth 1 -maxdepth 1 -type f \
                    -name '*.img' -printf "%f\n" | sed 's/.img$//'
            fi
        } | sort -u
    )
fi

for tftpdir in $TFTPDIRS; do
    if [ ! -d "$tftpdir" ]; then
        # skip directory
        continue
    fi

    tftpboot="$tftpdir/$TFTPBOOTDIR"
    tftpboot=${tftpboot%/}

    for arch in "$@"; do
        # Loop-mount NBD images in order to copy their kernels.
        # This ensures that the TFTP kernels are the same versions as in the
        # NBD exported image (e.g. user updated chroot but hasn't ran
        # ltsp-update-image yet).
        # It also makes it easier to transfer NBD images from other sources to
        # the LTSP server (no need to transfer the kernels separately).
        # Finally, it also allows for btrfs or ext loopback images.
        unset chroot
        if [ -f "$BASE/images/$arch.img" ]; then
            if [ -z "$mnt" ]; then
                mnt=$(mktemp -d)
                trap "cleanup" 0 HUP INT QUIT KILL SEGV PIPE TERM
            else
                umount_marked
            fi
            if mark_mount -o loop,ro "$BASE/images/$arch.img" "$mnt"; then
                chroot="$mnt"
            fi
        fi
        if [ -z "$chroot" ] && [ -x "$BASE/$arch/bin/true" ]; then
            chroot="$BASE/$arch"
        fi
        if [ -z "$chroot" ]; then
            echo "Skipping invalid chroot: $arch"
            continue
        fi
        echo "Updating $tftpdir directories for chroot: $arch"

        if [ "$COPYTFTP" = "true" ]; then
            mkdir -p "$tftpboot/$arch"
            cp -a "$chroot/boot/." "$tftpboot/$arch/"

            # Ensure that the kernel is readable (LP: #759115)
            chmod +r "$tftpboot/$arch/vmlinuz-"*
        fi

        # OFW on Mac is lame, they cannot tftp from directories
        if [ -e "$tftpboot/$arch/yaboot" ]; then
            if [ ! -e "$tftpdir/yaboot" ]; then
                ln -sf "$TFTPBOOTDIR/$arch/yaboot" "$tftpdir/yaboot"
            fi
            if [ ! -e "$tftpdir/yaboot.conf" ]; then
                ln -sf "$TFTPBOOTDIR/$arch/yaboot.conf" "$tftpdir/yaboot.conf"
            fi
        fi

        # Cleanup old kernels and images from tftpboot directory
        cleanup_kernels
    done
    # Update selinux file contexts if necessary
    if [ -f /selinux/enforce ] && [ -x /sbin/restorecon ]; then
        restorecon -R "$tftpdir" > /dev/null
    fi
done
