#!/bin/sh
#
#  Copyright (c) 2007 Canonical LTD
#
#  Author: Oliver Grawert <ogra@canonical.com>
#
#  2007, Scott Balneaves <sbalneav@ltsp.org>
#        Warren Togami <wtogami@redhat.com>
#  2008, Vagrant Cascadian <vagrant@freegeek.org>
#  2010, Gideon Romm <gadi@ltsp.org>
#  2012, Alkis Georgopoulos <alkisg@gmail.com>
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License as
#  published by the Free Software Foundation; either version 2 of the
#  License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, you can find it on the World Wide
#  Web at http://www.gnu.org/copyleft/gpl.html, or write to the Free
#  Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#

usage() {
    cat <<EOF
Usage: $0 [OPTION] [CHROOT...]
Generates an NBD image from an LTSP chroot, to be served by nbd-server.
Chroot can be a full path or a subdirectory of the LTSP base directory,
and it defaults to the host architecture if unset.

Options:
  -b, --base=          The LTSP base directory. Defaults to "/opt/ltsp".
  -c, --cleanup        Temporarily remove user accounts, logs, caches etc from
                       the chroot before exporting the image. The chroot arch
                       is required to be compatible with the server arch.
  -d, --tftp-boot-dir= The LTSP subdirectory within the TFTP base directory.
                       Defaults to "ltsp".
  -e, --exclude=       List of dirs/files to exclude from the image.
                       This is in addition to /etc/ltsp/nbd-exclude.conf.
  -f, --config-nbd     Generate appropriate nbd-server configuration files.
                       It's automatically set if NFS isn't used or if other LTSP
                       generated nbd-server configuration files already exist.
  -h, --help           This message.
  -m, --no-compress    Don't compress the generated image.
  -n, --no-backup      Don't backup chroot.img to chroot.img.old.
  -r, --revert         Swap chroot.img with chroot.img.old and update kernels.
  -t, --tftp-dirs=     Space-separated list of TFTP directories to update.
                       Defaults to "/var/lib/tftpboot /tftpboot /srv/tftp".
EOF
}

trap_cleanup() {
    # Don't stop on errors within this function.
    # local - means "restore flags on function exit".
    local -
    set +e

    # Stop trapping
    trap - 0 HUP INT QUIT KILL SEGV PIPE TERM
    umount_marked
    rmdir "$cu_chroot"
    rmdir "$cu_cow"
    rmdir "$cu_rofs"
    rmdir "$cu_base"
    unlock_package_management
}

# Create a temporary copy of the chroot and run ltsp-cleanup in it.
run_cleanup() {
    local chroot name
    chroot=$1
    name=$2

    if [ ! -x "$chroot/usr/share/ltsp/ltsp-cleanup" ]; then
        warn "Script $chroot/usr/share/ltsp/ltsp-cleanup does not exist, cannot cleanup the chroot."
        return 0
    fi
    lock_package_management
    cu_base=$(mktemp -d)
    cu_rofs="$cu_base/rofs"
    cu_cow="$cu_base/cow"
    cu_chroot="$cu_base/$name"
    mkdir "$cu_rofs"
    mkdir "$cu_cow"
    mkdir "$cu_chroot"
    trap "trap_cleanup" 0 HUP INT QUIT KILL SEGV PIPE TERM
    mark_mount --bind "$chroot" "$cu_rofs"
    mark_mount -t tmpfs -o mode=0755 tmpfs "$cu_cow"

    # If this is the first time that run_cleanup() is called,
    # ensure that the overlayfs or aufs module are loaded.
    if [ -z "$union_type" ]; then
        # '' is to check if some of them is already loaded
        for module in '' overlayfs aufs; do
            if [ -n "$module" ]; then
                modprobe "$module" || true
            fi
            # detect which unionfs to use
            while read nodev filesystem; do
                filesystem=${filesystem:-$nodev}
                case "$filesystem" in
                    overlayfs) 
                        union_type=overlayfs
                        union_opts="upperdir=$cu_cow,lowerdir=$cu_rofs"
                        # We prefer overlayfs to aufs, so break when found
                        break
                        ;;
                    aufs) 
                        union_type=aufs
                        union_opts="dirs=$cu_cow=rw:$cu_rofs=ro"
                        ;;
                esac
            done < /proc/filesystems
            test -n "$union_type" && break
        done
        test -n "$union_type" || die "No overlayfs or aufs support detected"
        mark_mount -t "$union_type" -o "$union_opts" "$union_type" "$cu_chroot"
    fi
    chroot "$cu_chroot" /usr/share/ltsp/ltsp-cleanup --yes
}

# Create the master nbd-server configuration file, and configuration files for
# the specified NBD image and for NBD swap, if they don't already exist.
# Also set $nbd_action appropriately.
create_nbd_config() {
    local image name
    image="$1"

    test -f "$image" || return 1
    name=${image##*/}
    name=${name%.*}
    mkdir -p "/etc/nbd-server/conf.d"

    if [ ! -f "/etc/nbd-server/config" ]; then
        # If user/group nbd exist, use them
        nbd_user=$(getent passwd nbd | cut -d : -f 1)
        nbd_user=${nbd_user:-nobody}
        nbd_group=$(getent group nbd | cut -d : -f 1)
        nbd_group=${nbd_group:-nogroup}
        cat > "/etc/nbd-server/config" <<EOF
[generic]
user = $nbd_user
group = $nbd_group
includedir = /etc/nbd-server/conf.d
EOF
        echo "Created /etc/nbd-server/config"
        # We can assume that nbd-server wasn't running without a config file
        nbd_action=start
    fi

    # Configuration file upgrade, remove it e.g. in 2015.
    if [ -f "/etc/nbd-server/conf.d/ltsp_$name.conf" ]; then
        if [ "$(sed -n '1s/\[ltsp_\(.*\)\]/\1/p' "/etc/nbd-server/conf.d/ltsp_$name.conf")" = "$name" ]; then
            echo "Removing old configuration file /etc/nbd-server/conf.d/ltsp_$name.conf in order to upgrade it"
            rm -f "/etc/nbd-server/conf.d/ltsp_$name.conf"
        fi
    fi

    if [ ! -f "/etc/nbd-server/conf.d/ltsp_$name.conf" ]; then
        cat >"/etc/nbd-server/conf.d/ltsp_$name.conf" <<EOF
[$BASE/$name]
exportname = $image
readonly = true
EOF
        echo "Created /etc/nbd-server/conf.d/ltsp_$name.conf"
        nbd_action=${nbd_action:-restart}
    fi

    if [ ! -f "/etc/nbd-server/conf.d/swap.conf" ]; then
        cat > "/etc/nbd-server/conf.d/swap.conf" <<EOF
[swap]
exportname = /tmp/nbd-swap/%s
prerun = nbdswapd %s
postrun = rm -f %s
EOF
        echo "Created /etc/nbd-server/conf.d/swap.conf"
        nbd_action=${nbd_action:-restart}
    fi

    # Make sure hosts.allow has the keepalive option for nbdswapd
    if ! grep -qsw nbdswapd /etc/hosts.allow; then
        echo 'nbdswapd: ALL: keepalive' >> /etc/hosts.allow
    fi
}

generate_image() {
    local chroot name imgdir nice ionice
    chroot=$1

    # If the chroot is a subdir of $BASE, make it an absolute path
    if [ "$chroot" != "/" ]; then
        chroot=${chroot%/}
        test -d "$BASE/$chroot" && chroot="$BASE/$chroot"
    fi
    test -d "$chroot" || die "Chroot $chroot does not exist."
    name=${chroot##*/}
    name=${name%.*}
    # If the chroot has no name part, e.g. /, name it after the host arch
    name=${name:-$(detect_arch)}
    imgdir=$BASE/images
    mkdir -p "$imgdir"

    if [ "$REVERT" = true ]; then
        test -f "$imgdir/$name.img.old" ||
            die "$imgdir/$name.img.old is missing, cannot revert to it"
        if [ -f "$imgdir/$name.img" ]; then
            # Swap old with new file
            mv "$imgdir/$name.img" "$imgdir/$name.img.tmp"
            mv "$imgdir/$name.img.old" "$imgdir/$name.img"
            mv "$imgdir/$name.img.tmp" "$imgdir/$name.img.old"
        else
            mv "$imgdir/$name.img.old" "$imgdir/$name.img"
        fi
        echo "Reverted to $imgdir/$name.img.old, please reboot your clients."
    else
        test -f "$chroot/usr/share/initramfs-tools/scripts/local-top/nbd" ||
            die "Chroot $chroot does not appear to support NBD booting."

        cu_chroot=$chroot
        if [ "$CLEANUP" = true ]; then
            # run_cleanup sets cu_chroot=$cu_base/$name for mksquashfs
            run_cleanup "$chroot" "$name"
        fi

        test -f /etc/ltsp/nbd-exclude.conf && EXCLUDE_FILE="/etc/ltsp/nbd-exclude.conf"
        test -x /usr/bin/nice && nice=nice || unset nice
        test -x /usr/bin/ionice && ionice=ionice || unset ionice
        if ! $nice $ionice mksquashfs "$cu_chroot" "$imgdir/$name.img.tmp" \
            -no-recovery -noappend -wildcards ${EXCLUDE_FILE:+-ef "$EXCLUDE_FILE"} \
            ${EXCLUDE:+-e "$EXCLUDE"} ${NO_COMPRESS:+-noF -noD -noI -no-exports}
        then
            rm -f "$imgdir/$name.img.tmp"
            die "mksquashfs failed to build the LTSP image, exiting"
        fi
        if [ -f "$imgdir/$name.img" ] && [ "$NO_BACKUP" != true ]; then
            mv "$imgdir/$name.img" "$imgdir/$name.img.old"
        fi
        mv "$imgdir/$name.img.tmp" "$imgdir/$name.img"
    fi
    create_nbd_config "$imgdir/$name.img"

    ltsp-update-kernels ${BASE:+-b "$BASE"} \
        ${TFTP_BOOT_DIR:+-d "$TFTP_BOOT_DIR"} \
        ${TFTP_DIRS:+-t "$TFTP_DIRS"} "$name"

    if [ "$cu_chroot" != "$chroot" ] && [ "$REVERT" != true ]; then
        trap_cleanup
    fi
}


# Distro specific functions

lock_package_management() {
    warn "Your distro doesn't support package management locking, continuing without locking..."
}

unlock_package_management() {
    if [ -n "$lockpid" ]; then
        kill "$lockpid" || true
        unset lockpid
    fi
}


# This also sources vendor functions and .conf file settings
. /usr/share/ltsp/ltsp-server-functions

if ! args=$(getopt -n "$0" -o "b:cd:e:fhmnrt:" \
    -l "base:,cleanup,tftp-boot-dir:,exclude:,config-nbd,help,no-compress,no-backup,revert,tftp-dirs:" -- "$@")
then
    exit 1
fi
eval "set -- $args"
while true ; do
    case "$1" in
        -b|--base) shift; BASE=$1 ;;
        -c|--cleanup) CLEANUP=true ;;
        -d|--tftp-boot-dir) shift; TFTP_BOOT_DIR=$1 ;;
        -e|--exclude) shift; EXCLUDE=$1 ;;
        -f|--config-nbd) CONFIG_NBD=true ;;
        -h|--help) usage; exit 0 ;;
        -m|--no-compress) NO_COMPRESS=true ;;
        -n|--no-backup) NO_BACKUP=true ;;
        -r|--revert) REVERT=$1 ;;
        -t|--tftp-dirs) shift; TFTP_DIRS=$1 ;;
        --) shift ; break ;;
        *) die "$0: Internal error!" ;;
    esac
    shift
done
require_root

BASE=${BASE:-/opt/ltsp}
# Remove trailing /, if present
BASE=${BASE%/}
if [ -z "$CONFIG_NBD" ]; then
    if [ -d /etc/nbd-server/conf.d ] &&
        [ -n "$(find /etc/nbd-server/conf.d/ -type f -name 'ltsp_*.conf' ! -name ltsp_swap.conf)" ]
    then
        CONFIG_NBD=true
    fi
    if [ -z "$CONFIG_NBD" ]; then
        if grep -qsr ^/opt/ltsp /etc/exports /etc/exports.d/; then
            die "Your system seems to be using NFS to serve LTSP chroots.
If you're absolutely certain you want to switch to NBD, run:
    $0 --config-nbd $*"
        fi
    fi
fi

# Chroots can be specified in the command line. If not, update all of them.
if [ $# -eq 0 ]; then
    set -- $(find "$BASE/" -mindepth 1 -maxdepth 1 -type d ! -name images \
        -printf "%f\n")
fi
test $# -gt 0 || die "No chroots found in $BASE"

for chroot in "$@"; do
    generate_image "$chroot"
done

if [ "$nbd_action" = start ]; then
    if ! invoke-rc.d nbd-server start; then
        warn "Failed to start nbd-server."
    fi
elif [ "$restart_nbd" = restart ]; then
    warn \
"For nbd-server to re-read its configuration, you need to manually run:
    service nbd-server restart
THIS WILL DISCONNECT ALL RUNNING CLIENTS (they'll need to be rebooted)."
fi
