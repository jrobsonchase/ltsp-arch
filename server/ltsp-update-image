#!/bin/sh
#
#  Copyright (c) 2007 Canonical LTD
#
#  Author: Oliver Grawert <ogra@canonical.com>
#
#  2007, Scott Balneaves <sbalneav@ltsp.org>
#        Warren Togami <wtogami@redhat.com>
#  2008, Vagrant Cascadian <vagrant@freegeek.org>
#  2010, Gideon Romm <gadi@ltsp.org>
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License as
#  published by the Free Software Foundation; either version 2 of the
#  License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, you can find it on the World Wide
#  Web at http://www.gnu.org/copyleft/gpl.html, or write to the Free
#  Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#


# Generates a squashfs image from an ltsp chroot to be served by an inetd driven
# nbd-server process.

usage() {
cat <<EOF
$0 [OPTION]
  -b, --base          Base of ltsp chroot.  Default is /opt/ltsp if unspecified.
  -p, --port          Port you wish this nbd image to communicate on.  Default
                      is 2000.
  -n, --no-comp       Do not compress the image.
  -e, --exclude-dirs  Exclude those dirs from the image.
  -d, --tftpbootdir   Subdir within tftpdir where ltsp kernels are.  Defaults
                      to "ltsp".
  -a, --arch          Architecture of this image.  Default is arch of the host.
  -h, --help          This message.
EOF
}

#
# Handle command line args
#

ARGS=$(getopt -o b:p:a:nh --long base:,port:,arch:,no-comp,help -n $0 -- "$@")

if [ "$?" != "0" ]; then
    exit 1                          # getopt failed
fi

eval set -- "${ARGS}"

while true ; do
    case "$1" in
        -b|--base) BASE=$2 ; shift 2 ;;
        -p|--port) PORT=$2 ; shift 2 ;;
        -a|--arch) ARCH=$2 ; shift 2 ;;
        -d|--tftpbootdir) TFTPBOOTDIR=$2 ; shift 2 ;;
        -n|--no-comp) NO_COMP="-noF -noD -noI -no-exports" ; shift 1 ;;
        -e|--exclude-dirs) EX_DIRS=$(echo $2| sed -e 's/dev\|tmp\|proc\|var//g') ; shift 2 ;;
        -h|--help) usage ; exit 0 ;;
        --) shift ; break ;;
        *) echo "Internal error!" ; exit 1 ;;
    esac
done

# defaults
BASE=${BASE:-"/opt/ltsp"}

# make sure we dont carry trailing slashes around (LP 189237)
BASE=$(echo ${BASE}|sed -e 's/\/$//g')

PORT=${PORT:-"2000"}
if [ -z "${ARCH}" ]; then
    ARCH=$(dpkg --print-architecture)
fi

IMGDIR="${BASE}/images"
CONFFILE="/usr/share/initramfs-tools/conf.d/ltsp"
CHROOT="${BASE}/${ARCH}"

#
# for updateing the pxe config
#

TFTPBOOTDIR=${TFTPBOOTDIR:-"ltsp"}
TFTPDIRS=${TFTPDIRS:-"/var/lib/tftpboot /tftpboot /srv/tftp"}

# source config file
if [ -f /etc/default/ltsp-update-image ]; then
    . /etc/default/ltsp-update-image
fi

if [ ! -d "${CHROOT}" ]; then
    echo "Error: chroot ${CHROOT} doesn't exist."
    exit 1
fi

collect_ports () {
    ALL_CHROOTS=${ALL_CHROOTS:-"$(find $BASE/ -mindepth 1 -maxdepth 1 -type d | grep -v images)"}
    unset ALL_PORT_CHROOTS
    for c in ${ALL_CHROOTS}; do
        # NBD_PORT will be recorded by this script in the chroot
        # For future reference
        unset NBD_PORT 
        [ -f ${c}/etc/ltsp/update-kernels.conf ] && . ${c}/etc/ltsp/update-kernels.conf
        # Make sure NBD_PORT is a number
        NBD_PORT=$(echo ${NBD_PORT}|sed -e '/[^0-9]/d')
        ALL_PORT_CHROOTS="${ALL_PORT_CHROOTS} ${NBD_PORT}=${c}"
    done 
}

find_available_port () {
    unset FOUND_PORT
    # Set p to the base port
    p=${PORT}
    while [ -z "${FOUND_PORT}" ]; do
        case "${PORTS_FOUND}" in
            *-${p}-*) p=$(($p+1)) ;;
            *) 
                if netstat -lnp|grep :${p} >/dev/null && [ -z "$(grep ${p} /etc/inetd.conf| grep nbdrootd)" ]; then 
                    # Port is currently in use by another service
                    p=$(($p+1)); continue
                else 
                    export NBD_PORT=$p; FOUND_PORT=1; return 0 
                fi
                ;;
        esac
    done
}

assign_ports () {
    PORTS_FOUND="--"
    unset RUN_LUK
    for c in $(echo ${ALL_PORT_CHROOTS}|tr ' ' '\n'| sort); do
        NBD_PORT=${c%%=*}
        THIS_CHROOT=${c#*=}
        case "${PORTS_FOUND}" in
            *-${NBD_PORT}-*) 
                OLD_PORT=${NBD_PORT}
                find_available_port
                echo "Port ${OLD_PORT} already in use. Changing to ${NBD_PORT}."
                if [ ! -d "${THIS_CHROOT}/etc/ltsp" ]; then
                    mkdir "${THIS_CHROOT}/etc/ltsp"
                fi
                echo "BOOTPROMPT_OPTS=\"quiet splash nbdport=${NBD_PORT}\"" >${THIS_CHROOT}/etc/ltsp/update-kernels.conf
                echo "NBD_PORT=${NBD_PORT}" >>${THIS_CHROOT}/etc/ltsp/update-kernels.conf
                echo "Regenerating kernel... "
                chroot ${THIS_CHROOT} /usr/share/ltsp/update-kernels
                echo "Done."
                echo -n "Configuring inetd... "
                IMAGE=${IMGDIR}/${THIS_CHROOT##*/}.img 
                sed -i -e "\|${IMAGE}|d" /etc/inetd.conf
                update-inetd --group LTSP --add "${NBD_PORT}               stream  tcp nowait  nobody /usr/sbin/tcpd /usr/sbin/nbdrootd ${IMAGE}"
                echo "Done."
                echo -n "Updating pxelinux default configuration..."
                for TFTPDIR in $TFTPDIRS ; do
                    if [ ! -d $TFTPDIR ]; then
                        continue       # skip directory
                    fi
                    PXECFG="${TFTPDIR}/${TFTPBOOTDIR}/${THIS_CHROOT##*/}/pxelinux.cfg/default"
                    if [ ! -f ${PXECFG} ]; then
                        mkdir -p "${TFTPDIR}/${TFTPBOOTDIR}/${THIS_CHROOT##*/}/pxelinux.cfg"
                        echo <<EOF >${PXECFG}
default ltsp 

label ltsp 
kernel vmlinuz nbdport=${NBD_PORT}
append ro initrd=initrd.img quiet splash nbdport=${NBD_PORT}
EOF
                        continue
                    fi
                    if grep nbdport ${PXECFG} > /dev/null 2>&1 ; then
                        sed -i -e "s/nbdport=[0-9]*/nbdport=${NBD_PORT}/g" ${PXECFG}
                    fi
                done
                echo "Done."
                RUN_LUK=1
                ;;
        esac
        PORTS_FOUND="${PORTS_FOUND}${NBD_PORT}-"
    done 
}

generate_image () {
    # Find out if we are really an nbd client and if so, build the image.
    # Check and see if user's left /proc mounted in chroot.  If so, issue
    # a warning, and unmount it
    PROC_MOUNTED=$(chroot ${CHROOT} test -f /proc/cpuinfo && echo True)
    if [ -n "${PROC_MOUNTED}" ]; then
        echo "/proc mounted in chroot ${CHROOT}, Unmounting."
        umount ${CHROOT}/proc
    fi
    
    # Are we a chroot that wants an nbd image made?
    if $(grep nbd "${CHROOT}/${CONFFILE}" > /dev/null 2>&1); then
        # make sure the images dir exists
        if [ ! -d ${IMGDIR} ]; then
            mkdir -p ${IMGDIR}
        fi
    
        IMAGE="${IMGDIR}/${ARCH}.img"
        rm -f "${IMAGE}.tmp" >/dev/null 2>&1
        mksquashfs "${CHROOT}" "${IMAGE}.tmp" $NO_COMP -e cdrom ${EX_DIRS}
        if [ "$?" != "0" ]; then
            echo "Error: mksquashfs failed to build the ltsp image, exiting"
            exit 1
        fi
        if [ -f "${IMAGE}.tmp" ]; then
            mv "${IMAGE}.tmp" "${IMAGE}"
            chmod 0644 "${IMAGE}"
        fi
    fi
}

collect_ports
assign_ports
[ -n "$RUN_LUK" ] && ltsp-update-kernels -b "${BASE}" -t "${TFTPDIRS}" -d "${TFTPBOOTDIR}"
generate_image

# Make sure hosts.allow has the keepalive option for nbdrootd
if [ -z "$(grep nbdrootd /etc/hosts.allow)" ]; then
    echo 'nbdrootd: ALL: keepalive' >> /etc/hosts.allow
fi

